[ { "title": "Installation", "url": "/https://kaiserkeenmon.github.io/WPPluginModernizer/posts/installation/", "categories": "", "tags": "", "date": "2024-04-01 01:10:00 -0500", "snippet": " WPPluginModernizer Free Version Download the Plugin: Upload to WordPress: Activate the Plugin: Install Dependencies: Create Child Plugin(s) (Use child plugins to deve...", "content": " WPPluginModernizer Free Version Download the Plugin: Upload to WordPress: Activate the Plugin: Install Dependencies: Create Child Plugin(s) (Use child plugins to develop your custom functionality): Usage: WPPluginModernizer Pro Version (Coming Soon…) Purchase and Download: Install via WordPress Dashboard: Automatic Updates: Note: WPPluginModernizer Free VersionTo install WPPluginModernizer Open Source, follow these steps:Download the Plugin: Download the free version from wppluginmodernizer.com or fork it from the GitHub repository.Upload to WordPress: Extract the downloaded ZIP file on your computer. Navigate to the /wp-content/plugins/ directory. Upload the extracted WPPluginModernizer folder to this directory.Activate the Plugin: Log in to your WordPress admin dashboard. Go to the “Plugins” section. Find WPPluginModernizer in the list of plugins. Click “Activate” below WPPluginModernizer.Install Dependencies: cd into the WPPluginModernizer directory. Run composer install to install the required dependencies.Create Child Plugin(s) (Use child plugins to develop your custom functionality): Run php modernize make:child-plugin [YourChildPluginName] to create a child plugin with your desired name. This will create a new directory in the /wp-content/plugins/ directory. Note: You can create multiple child plugins to separate your custom functionality. Customizations made to the child plugins will not be affected by updates to WPPluginModernizer.Usage:Once activated, WPPluginModernizer is ready to use. Customize and modernize your WordPress plugins with WPPluginModernizer’s advanced features inspired by modern PHP frameworks.WPPluginModernizer Pro Version (Coming Soon…)For WPPluginModernizer Pro:Purchase and Download: Purchase the WPPluginModernizer Pro version from wppluginmodernizer.com. Download the Pro version ZIP file to your computer.Install via WordPress Dashboard: Log in to your WordPress admin dashboard. From the main menu, navigate to the “Plugins” section. Click on “Add New” and then “Upload Plugin.” Choose the downloaded Pro version ZIP file. Click “Install Now” and then “Activate” once installed. From the main menu, navigate to “WPPM -&gt; License”. Enter your license key to enable use.Automatic Updates:Once installed, you will receive automatic updates for WPPluginModernizer Pro via the WordPress dashboard.Note: WPPluginModernizer Free Version can be manually installed and does not support automatic updates via the WordPress dashboard. WPPluginModernizer Pro Version offers convenient installation, automatic updates, advanced features, as well as customizable, branded child plugin support, enabling the creation of multiple plugin instances that are all powered by WPPluginModernizer. " }, { "title": "Getting Started", "url": "/https://kaiserkeenmon.github.io/WPPluginModernizer/posts/getting-started/", "categories": "", "tags": "", "date": "2024-04-01 00:10:00 -0500", "snippet": " Creating a Child Plugin Services 1. Generate a Service 1.1 Register the Generated Service and Repository 1.2 Using the Service and Repository ...", "content": " Creating a Child Plugin Services 1. Generate a Service 1.1 Register the Generated Service and Repository 1.2 Using the Service and Repository Gutenberg Blocks 2. Generate a Gutenberg Block 2.1 Initialize the Block 2.2 Using the Block API Endpoints 3. Generate an API Endpoint File 3.1 Register the Endpoint 3.2 Using the Endpoint Console Commands 4. Generate a Console Command 4.1 Register the Console Command 4.2 Using the Command Welcome to WPPluginModernizer! This guide outlines the steps to create a child plugin for customizations. You’ll learn how to generate services, blocks, API endpoints, and console commands to extend your WordPress development efficiently.Creating a Child PluginCreate a child plugin to house your customizations. This ensures your modifications are preserved during parent plugin updates.Services1. Generate a Servicephp modernize make:service [YourServiceName]Replace [YourServiceName] with your service’s name.1.1 Register the Generated Service and RepositoryAfter generating your service, register it within your child plugin’s registration.php file. This step is crucial for your service and repository to be recognized and usable.1.2 Using the Service and RepositoryUtilize the registered service and repository to build your application’s functionality. Note: Refer to our detailed user guide video for a comprehensive walkthrough on using WPPluginModernizer.Gutenberg Blocks2. Generate a Gutenberg Blockphp modernize make:gutenberg-block2.1 Initialize the BlockAfter generating your block, follow the theme or plugin documentation to properly initialize it, including enqueuing scripts and styles, and registering the block in WordPress.2.2 Using the BlockYour newly created block can now be added to posts and pages through the Gutenberg editor. Customize and extend it according to your requirements. Note: Refer to our detailed user guide video for a comprehensive walkthrough on using WPPluginModernizer.API Endpoints3. Generate an API Endpoint Filephp modernize make:api-routes3.1 Register the EndpointAdd the new API endpoint to your plugin’s registration.php file to make it available for use within WordPress.3.2 Using the EndpointThe registered API endpoint can be used to facilitate communication between your Gutenberg block and the service, enabling dynamic data fetch and manipulation. Note: Refer to our detailed user guide video for a comprehensive walkthrough on using WPPluginModernizer.Console Commands4. Generate a Console Commandphp modernize make:command [YourProcessName]Replace [YourProcessName] with the name for your command.4.1 Register the Console CommandRegister the new command within the registration.php file to make it available for use.4.2 Using the CommandYou can now execute your custom command through WP-CLI to automate tasks, run processes, or manage WordPress programmatically. Note: Refer to our detailed user guide video for a comprehensive walkthrough on using WPPluginModernizer." }, { "title": "Updates", "url": "/https://kaiserkeenmon.github.io/WPPluginModernizer/posts/updating/", "categories": "", "tags": "", "date": "2024-03-31 23:10:00 -0500", "snippet": "Updating WPPluginModernizerPerforming UpdatesHow to Update:Important Note on CustomizationsPreserving Customizations:Creating a Child Plugin:Questions and SupportUpdating WPPluginModernizerKeeping ...", "content": "Updating WPPluginModernizerPerforming UpdatesHow to Update:Important Note on CustomizationsPreserving Customizations:Creating a Child Plugin:Questions and SupportUpdating WPPluginModernizerKeeping your WPPluginModernizer plugin up-to-date is crucial for maintaining security, performance, and compatibility with the latest WordPress features. This guide provides an overview of how to update WPPluginModernizer and best practices for preserving your customizations.Performing UpdatesUpdates to WPPluginModernizer can be performed directly through the WordPress plugin dashboard. This ensures that your plugin remains up-to-date with the latest features, bug fixes, and security enhancements.How to Update: Log in to your WordPress admin dashboard. Navigate to the Plugins section. You’ll see a notification under WPPluginModernizer if an update is available. Click the Update now link to start the update process.The update process is automated. Once initiated, WordPress will download and install the latest version of WPPluginModernizer. You’ll receive a confirmation once the update is successful.Important Note on CustomizationsWhen updating WPPluginModernizer, please be aware that modifications made directly to the parent plugin’s files will be overwritten. This includes any changes to the plugin’s PHP, JavaScript, CSS, or other files that are part of the WPPluginModernizer package.Preserving Customizations:To ensure that your customizations are not lost during an update, all customizations should be made through child plugins. Child plugins are separate from the parent WPPluginModernizer plugin and are not affected by updates. This approach allows you to extend or modify the functionality of WPPluginModernizer without risking your changes being overwritten.Creating a Child Plugin: If you haven’t already, create a child plugin by following the guide in the Getting Started section. Implement your customizations within this child plugin, including new services, Gutenberg blocks, API endpoints, and more.By following this practice, you can safely update WPPluginModernizer whenever a new version is released, ensuring your site benefits from the latest improvements while keeping your customizations intact.Questions and SupportIf you have any questions about updating WPPluginModernizer or need assistance with child plugins, please visit our Support Page or reach out via our GitHub Issues page.Thank you for using WPPluginModernizer to modernize your WordPress plugin development experience!" } ]
